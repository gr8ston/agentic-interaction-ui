
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://qijceioeubmccdmissne.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFpamNlaW9ldWJtY2NkbWlzc25lIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE0NjQ2MjEsImV4cCI6MjA1NzA0MDYyMX0.8a_61geHU6blwMIQ092MHB_tOovO0dDFl-Hi9hE2zsI";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

console.log("Creating Supabase client with URL:", SUPABASE_URL);
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true
  }
});

// Helper function to safely convert token values from various formats
export const getTotalTokens = (tokenValue: any): number => {
  // If it's null/undefined, return 0
  if (tokenValue === null || tokenValue === undefined) {
    return 0;
  }
  
  if (typeof tokenValue === 'object') {
    // Check for OpenAI format with prompt_tokens and completion_tokens
    if ('prompt_tokens' in tokenValue && 'completion_tokens' in tokenValue) {
      return Number(tokenValue.prompt_tokens || 0) + Number(tokenValue.completion_tokens || 0);
    }
    // Check for standard format with input and output fields
    else if ('input' in tokenValue && 'output' in tokenValue) {
      return Number(tokenValue.input || 0) + Number(tokenValue.output || 0);
    }
    // Sum up all numeric values in the object
    else {
      return Object.values(tokenValue).reduce((sum, val) => 
        sum + (typeof val === 'number' ? val : (typeof val === 'string' ? Number(val) || 0 : 0)), 0);
    }
  } 
  
  // If it's a primitive value, convert to number
  return typeof tokenValue === 'number' ? tokenValue : (Number(tokenValue) || 0);
};

// Log connection status
(async () => {
  try {
    console.log("Testing Supabase connection...");
    const { error, count } = await supabase.from('conversations').select('*', { count: 'exact', head: true });
    if (error) {
      console.error('Supabase connection check failed:', error);
    } else {
      console.log('Supabase connection established successfully. Count:', count);
    }
  } catch (err) {
    console.error('Error checking Supabase connection:', err);
  }
})();
